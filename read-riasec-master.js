const XLSX = require('xlsx');

console.log('๐ ูุฑุงุกุฉ ููู RIASEC Master...\n');
console.log('='.repeat(80) + '\n');

try {
  // ูุฑุงุกุฉ ุงูููู
  const workbook = XLSX.readFile('New RIASEC/RIASEC_Master_Global_Bilingual (6).xlsx');
  
  console.log('๐ ูุนูููุงุช ุงูููู:\n');
  console.log(`   ุนุฏุฏ ุงูุฃูุฑุงู (Sheets): ${workbook.SheetNames.length}\n`);
  
  // ุนุฑุถ ุฃุณูุงุก ุงูุฃูุฑุงู
  console.log('๐ ุฃุณูุงุก ุงูุฃูุฑุงู:\n');
  workbook.SheetNames.forEach((name, index) => {
    console.log(`   ${index + 1}. ${name}`);
  });
  
  console.log('\n' + '='.repeat(80) + '\n');
  
  // ุชุญููู ูู ูุฑูุฉ
  workbook.SheetNames.forEach((sheetName, index) => {
    console.log(`๐ ุงููุฑูุฉ ${index + 1}: ${sheetName}\n`);
    
    const worksheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    console.log(`   ุนุฏุฏ ุงูุตููู: ${data.length}`);
    
    if (data.length > 0) {
      // ุนุฑุถ ุงูุนูุงููู (ุฃูู ุตู)
      console.log(`   ุงูุนูุงููู: ${data[0].join(' | ')}`);
      
      // ุนุฑุถ ุฃูู 3 ุตููู ูุนููุฉ
      console.log('\n   ๐ ุนููุฉ ูู ุงูุจูุงูุงุช:\n');
      for (let i = 1; i < Math.min(4, data.length); i++) {
        console.log(`      ุตู ${i}: ${data[i].slice(0, 5).join(' | ')}...`);
      }
    }
    
    console.log('\n' + '-'.repeat(80) + '\n');
  });
  
  // ุชุญููู ุชูุตููู ูููุฑูุฉ ุงูุฃููู
  console.log('='.repeat(80));
  console.log('\n๐ ุชุญููู ุชูุตููู ูููุฑูุฉ ุงูุฃููู:\n');
  
  const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
  const firstData = XLSX.utils.sheet_to_json(firstSheet);
  
  if (firstData.length > 0) {
    console.log(`   ุนุฏุฏ ุงูุฃุณุฆูุฉ: ${firstData.length}`);
    console.log(`   ุงูุฃุนูุฏุฉ ุงูููุฌูุฏุฉ: ${Object.keys(firstData[0]).join(', ')}\n`);
    
    // ุนุฑุถ ุฃูู ุณุคุงู ูุงูู
    console.log('   ๐ ูุซุงู ุนูู ุณุคุงู ูุงูู:\n');
    const firstQuestion = firstData[0];
    Object.entries(firstQuestion).forEach(([key, value]) => {
      console.log(`      ${key}: ${value}`);
    });
    
    // ุฅุญุตุงุฆูุงุช
    console.log('\n   ๐ ุฅุญุตุงุฆูุงุช:\n');
    
    // ุนุฏ ุงูุฃููุงุน (Types)
    if (firstData[0].Type || firstData[0].type) {
      const types = {};
      firstData.forEach(row => {
        const type = row.Type || row.type;
        types[type] = (types[type] || 0) + 1;
      });
      
      console.log('      ุงูุชูุฒูุน ุญุณุจ ุงูููุน:');
      Object.entries(types).sort().forEach(([type, count]) => {
        console.log(`         ${type}: ${count} ุณุคุงู`);
      });
    }
  }
  
  console.log('\n' + '='.repeat(80));
  
} catch (error) {
  console.error('โ ุฎุทุฃ ูู ูุฑุงุกุฉ ุงูููู:', error.message);
}
