// ============================================================
// ุฅูุดุงุก user profile ูุญูุธ ุชูููู RIASEC ูุงูู
// ============================================================

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// ุจูุงูุงุช ุงูุชูููู ุงููุงููุฉ
const assessmentData = {
  holland_code: 'RIS',
  raw_scores: {
    R: 48,
    I: 42,
    S: 35,
    A: 28,
    E: 22,
    C: 19
  },
  ranking: [
    { type: 'R', raw: 48, percentage: 80 },
    { type: 'I', raw: 42, percentage: 70 },
    { type: 'S', raw: 35, percentage: 58 },
    { type: 'A', raw: 28, percentage: 47 },
    { type: 'E', raw: 22, percentage: 37 },
    { type: 'C', raw: 19, percentage: 32 }
  ],
  confidence_score: 87,
  responses: generateResponses()
};

function generateResponses() {
  const responses = [];
  const patterns = {
    R: [5, 5, 4, 5, 4, 5, 4, 5, 5, 4],
    I: [5, 4, 5, 4, 4, 5, 4, 4, 5, 4],
    S: [4, 3, 4, 3, 4, 3, 4, 3, 3, 4],
    A: [3, 2, 3, 3, 2, 3, 2, 3, 3, 2],
    E: [2, 2, 3, 2, 2, 2, 3, 2, 2, 3],
    C: [2, 2, 2, 3, 2, 2, 2, 2, 3, 2]
  };
  
  let questionId = 1;
  for (const [type, values] of Object.entries(patterns)) {
    values.forEach((value) => {
      responses.push({
        question_id: questionId++,
        dimension: type,
        answer_value: value,
        time_spent_seconds: Math.floor(Math.random() * 10) + 5
      });
    });
  }
  
  return responses;
}

async function createProfileAndSaveAssessment() {
  try {
    console.log('๐ ุจุฏุก ุงูุนูููุฉ...\n');
    
    // 1. ุงูุญุตูู ุนูู ุฃูู ูุณุชุฎุฏู ูู auth.users
    console.log('๐ค ุฌุงุฑู ุงูุจุญุซ ุนู ุงููุณุชุฎุฏููู...');
    const { data: { users }, error: usersError } = await supabase.auth.admin.listUsers();
    
    if (usersError || !users || users.length === 0) {
      console.error('โ ูุง ููุฌุฏ ูุณุชุฎุฏููู ูุณุฌููู');
      return;
    }
    
    const authUser = users[0];
    console.log('โ ุชู ุงูุนุซูุฑ ุนูู ูุณุชุฎุฏู:');
    console.log('   User ID:', authUser.id);
    console.log('   Email:', authUser.email || 'ูุง ููุฌุฏ');
    console.log('');
    
    // 2. ุงูุชุญูู ูู ูุฌูุฏ profile
    console.log('๐ ุฌุงุฑู ุงูุชุญูู ูู ุงูู profile...');
    const { data: existingProfile } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('user_id', authUser.id)
      .single();
    
    let userProfile;
    
    if (existingProfile) {
      console.log('โ ุงูู profile ููุฌูุฏ ุจุงููุนู');
      userProfile = existingProfile;
    } else {
      // 3. ุฅูุดุงุก profile ุฌุฏูุฏ
      console.log('๐ ุฌุงุฑู ุฅูุดุงุก profile ุฌุฏูุฏ...');
      const profileData = {
        user_id: authUser.id,
        email: authUser.email || 'test@school2career.com',
        first_name: 'ุฃุญูุฏ',
        last_name: 'ูุญูุฏ',
        user_type: 'student',
        preferred_language: 'ar',
        is_active: true
      };
      
      const { data: newProfile, error: profileError } = await supabase
        .from('user_profiles')
        .insert(profileData)
        .select()
        .single();
      
      if (profileError) {
        console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูู profile:', profileError);
        return;
      }
      
      console.log('โ ุชู ุฅูุดุงุก ุงูู profile ุจูุฌุงุญ');
      userProfile = newProfile;
    }
    
    console.log('   ุงูุงุณู:', userProfile.full_name || (userProfile.first_name + ' ' + userProfile.last_name));
    console.log('');
    
    // 4. ุงูุญุตูู ุนูู tool_id
    console.log('๐ ุฌุงุฑู ุงูุจุญุซ ุนู RIASEC tool...');
    const { data: tool, error: toolError } = await supabase
      .from('assessment_tools')
      .select('id, name_ar')
      .limit(1)
      .single();
    
    if (toolError) {
      console.error('โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู tool:', toolError);
      return;
    }
    
    console.log('โ ุชู ุงูุนุซูุฑ ุนูู tool:', tool.name_ar);
    console.log('   Tool ID:', tool.id);
    console.log('');
    
    // 5. ุฅูุดุงุก ุฌูุณุฉ ุชูููู
    console.log('๐ ุฌุงุฑู ุฅูุดุงุก ุฌูุณุฉ ุงูุชูููู...');
    const sessionData = {
      user_id: authUser.id,
      tool_id: tool.id,
      total_questions: 60,
      questions_answered: 60,
      is_completed: true,
      completed_at: new Date().toISOString(),
      time_spent_seconds: 1200,
      responses: assessmentData.responses,
      report_type: 'basic',
      credits_paid: 0
    };
    
    const { data: session, error: sessionError } = await supabase
      .from('assessment_sessions')
      .insert(sessionData)
      .select()
      .single();
    
    if (sessionError) {
      console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฌูุณุฉ:', sessionError);
      return;
    }
    
    console.log('โ ุชู ุฅูุดุงุก ุงูุฌูุณุฉ ุจูุฌุงุญ');
    console.log('   Session ID:', session.id);
    console.log('');
    
    // 6. ุญูุธ ุงููุชุงุฆุฌ
    console.log('๐พ ุฌุงุฑู ุญูุธ ุงููุชุงุฆุฌ...');
    
    const detailed_scores = {
      assessment_type: 'RIASEC',
      holland_code: assessmentData.holland_code,
      raw_scores: assessmentData.raw_scores,
      ranking: assessmentData.ranking,
      confidence_score: assessmentData.confidence_score,
      completed_date: new Date().toISOString()
    };
    
    const resultData = {
      session_id: session.id,
      user_id: authUser.id,
      tool_id: tool.id,
      detailed_scores,
      raw_score: assessmentData.ranking[0].raw,
      percentage_score: assessmentData.ranking[0].percentage,
      profile_type: `${assessmentData.holland_code[0]} - ${getTypeName(assessmentData.holland_code[0])}`,
      profile_description: getTypeDescription(assessmentData.holland_code[0]),
      strengths: getStrengths(assessmentData.ranking),
      weaknesses: getWeaknesses(assessmentData.ranking),
      career_recommendations: [],
      is_public: false
    };
    
    const { data: result, error: resultError } = await supabase
      .from('assessment_results')
      .insert(resultData)
      .select()
      .single();
    
    if (resultError) {
      console.error('โ ุฎุทุฃ ูู ุญูุธ ุงููุชุงุฆุฌ:', resultError);
      return;
    }
    
    console.log('โ ุชู ุญูุธ ุงููุชุงุฆุฌ ุจูุฌุงุญ!');
    console.log('   Result ID:', result.id);
    console.log('');
    
    // 7. ุนุฑุถ ููุฎุต ุงููุชุงุฆุฌ
    console.log('โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ');
    console.log('๐ ููุฎุต ุงูุชูููู ุงููุญููุธ');
    console.log('โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ');
    console.log('');
    console.log('๐ค ุงููุณุชุฎุฏู:', userProfile.full_name || (userProfile.first_name + ' ' + userProfile.last_name));
    console.log('๐ง ุงูุจุฑูุฏ:', userProfile.email);
    console.log('๐ User ID:', authUser.id);
    console.log('');
    console.log('๐ฏ Holland Code:', assessmentData.holland_code);
    console.log('๐ Confidence Score:', assessmentData.confidence_score + '%');
    console.log('');
    console.log('๐ ุงููุณุจ ุงููุฆููุฉ ููู ููุน:');
    assessmentData.ranking.forEach(item => {
      const typeName = getTypeName(item.type);
      console.log(`   ${item.type} (${typeName}): ${item.percentage}% (${item.raw} ููุทุฉ)`);
    });
    console.log('');
    console.log('๐ ุชุงุฑูุฎ ุงูุชูููู:', new Date().toLocaleString('ar-EG'));
    console.log('โฑ๏ธ  ุงูููุช ุงููุณุชุบุฑู: 20 ุฏูููุฉ');
    console.log('โ ุนุฏุฏ ุงูุฃุณุฆูุฉ ุงููุฌุงุจุฉ: 60/60');
    console.log('');
    console.log('๐ช ููุงุท ุงูููุฉ:');
    getStrengths(assessmentData.ranking).forEach(s => console.log(`   โข ${s}`));
    console.log('');
    console.log('๐ ูุฌุงูุงุช ุงูุชุทููุฑ:');
    getWeaknesses(assessmentData.ranking).forEach(w => console.log(`   โข ${w}`));
    console.log('');
    console.log('โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ');
    console.log('โ ุชู ุญูุธ ุงูุชูููู ุจูุฌุงุญ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช!');
    console.log('โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ');
    
  } catch (error) {
    console.error('๐ฅ ุฎุทุฃ ุบูุฑ ูุชููุน:', error);
  }
}

// Helper functions
function getTypeName(type) {
  const names = {
    R: 'ุงููุงูุนู - ุงูุนููู',
    I: 'ุงูุงุณุชูุตุงุฆู - ุงูุชุญูููู',
    A: 'ุงูููู - ุงูุฅุจุฏุงุนู',
    S: 'ุงูุงุฌุชูุงุนู - ุงููุณุงุนุฏ',
    E: 'ุงููุบุงูุฑ - ุงูููุงุฏู',
    C: 'ุงูุชูููุฏู - ุงูููุธู'
  };
  return names[type] || type;
}

function getTypeDescription(type) {
  const descriptions = {
    R: 'ุชูุถู ุงูุนูู ูุน ุงูุฃุดูุงุก ุงููุงุฏูุฉ ูุงูุฃุฏูุงุช ูุงูุขูุงุช. ุชููู ููุฃูุดุทุฉ ุงูุนูููุฉ ูุงูุชุทุจูููุฉ.',
    I: 'ุชูุถู ุงูุชูููุฑ ูุงูุชุญููู ูุญู ุงููุดููุงุช. ุชููู ููุฃูุดุทุฉ ุงูุจุญุซูุฉ ูุงูุนูููุฉ.',
    A: 'ุชูุถู ุงูุชุนุจูุฑ ุงูุฅุจุฏุงุนู ูุงูููู. ุชููู ููุฃูุดุทุฉ ุงููููุฉ ูุงูุชุตููููุฉ.',
    S: 'ุชูุถู ูุณุงุนุฏุฉ ุงูุขุฎุฑูู ูุงูุนูู ูุนูู. ุชููู ููุฃูุดุทุฉ ุงูุงุฌุชูุงุนูุฉ ูุงูุชุนููููุฉ.',
    E: 'ุชูุถู ุงูููุงุฏุฉ ูุงูุฅููุงุน. ุชููู ููุฃูุดุทุฉ ุงูุฅุฏุงุฑูุฉ ูุงูุชุฌุงุฑูุฉ.',
    C: 'ุชูุถู ุงูุชูุธูู ูุงูุฏูุฉ. ุชููู ููุฃูุดุทุฉ ุงูููุชุจูุฉ ูุงูุฅุฏุงุฑูุฉ.'
  };
  return descriptions[type] || '';
}

function getStrengths(ranking) {
  return ranking.slice(0, 3).map(item => getTypeName(item.type));
}

function getWeaknesses(ranking) {
  return ranking.slice(-2).map(item => getTypeName(item.type));
}

// ุชุดุบูู ุงูุณูุฑูุจุช
createProfileAndSaveAssessment();
